"""
Convert JSONL data files to SQLite database

This utility converts the JSONL files generated by letta_file_bench_gen.py
into a SQLite database for easier querying and analysis.
"""
import json
import sqlite3
from pathlib import Path
from typing import Dict, List, Any
import argparse


def create_tables(conn: sqlite3.Connection):
    """Create all necessary tables in the SQLite database."""
    cursor = conn.cursor()
    
    # Create people table
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS people (
            person_id TEXT PRIMARY KEY,
            full_name TEXT NOT NULL,
            dob TEXT,
            email TEXT,
            phone TEXT
        )
    """)
    
    # Create addresses table
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS addresses (
            address_id TEXT PRIMARY KEY,
            owner_id TEXT NOT NULL,
            street TEXT,
            city TEXT,
            state TEXT,
            postal_code TEXT,
            country TEXT,
            FOREIGN KEY (owner_id) REFERENCES people(person_id)
        )
    """)
    
    # Create bank accounts table
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS bank_accounts (
            account_id TEXT PRIMARY KEY,
            owner_id TEXT NOT NULL,
            bank_name TEXT,
            routing TEXT,
            account_no TEXT,
            balance REAL,
            currency TEXT,
            FOREIGN KEY (owner_id) REFERENCES people(person_id)
        )
    """)
    
    # Create employments table
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS employments (
            employment_id TEXT PRIMARY KEY,
            owner_id TEXT NOT NULL,
            employer TEXT,
            job_title TEXT,
            start_date TEXT,
            salary REAL,
            currency TEXT,
            FOREIGN KEY (owner_id) REFERENCES people(person_id)
        )
    """)
    
    # Create credit cards table
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS credit_cards (
            card_id TEXT PRIMARY KEY,
            owner_id TEXT NOT NULL,
            provider TEXT,
            number TEXT,
            cvc TEXT,
            expire TEXT,
            FOREIGN KEY (owner_id) REFERENCES people(person_id)
        )
    """)
    
    # Create vehicles table
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS vehicles (
            vehicle_id TEXT PRIMARY KEY,
            owner_id TEXT NOT NULL,
            make TEXT,
            model TEXT,
            year INTEGER,
            vin TEXT,
            license_plate TEXT,
            state TEXT,
            FOREIGN KEY (owner_id) REFERENCES people(person_id)
        )
    """)
    
    # Create pets table
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS pets (
            pet_id TEXT PRIMARY KEY,
            owner_id TEXT NOT NULL,
            name TEXT,
            species TEXT,
            breed TEXT,
            age INTEGER,
            weight REAL,
            FOREIGN KEY (owner_id) REFERENCES people(person_id)
        )
    """)
    
    # Create internet accounts table
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS internet_accounts (
            account_id TEXT PRIMARY KEY,
            owner_id TEXT NOT NULL,
            url TEXT,
            username TEXT,
            email TEXT,
            password TEXT,
            FOREIGN KEY (owner_id) REFERENCES people(person_id)
        )
    """)
    
    # Create insurance policies table
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS insurance_policies (
            policy_id TEXT PRIMARY KEY,
            owner_id TEXT NOT NULL,
            insurer TEXT,
            policy_number TEXT,
            policy_type TEXT,
            expires TEXT,
            FOREIGN KEY (owner_id) REFERENCES people(person_id)
        )
    """)
    
    # Create medical records table
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS medical_records (
            record_id TEXT PRIMARY KEY,
            owner_id TEXT NOT NULL,
            ssn TEXT,
            blood_type TEXT,
            condition TEXT,
            FOREIGN KEY (owner_id) REFERENCES people(person_id)
        )
    """)
    
    # Create questions table
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS questions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            question TEXT NOT NULL,
            answer TEXT NOT NULL,
            difficulty TEXT,
            question_type TEXT,
            required_files TEXT,  -- JSON array
            reasoning_steps TEXT  -- JSON array
        )
    """)
    
    conn.commit()


def load_jsonl(file_path: Path) -> List[Dict[str, Any]]:
    """Load data from a JSONL file."""
    records = []
    with open(file_path, 'r', encoding='utf-8') as f:
        for line in f:
            if line.strip():
                records.append(json.loads(line))
    return records


def insert_people(conn: sqlite3.Connection, people: List[Dict[str, Any]]):
    """Insert people records into the database."""
    cursor = conn.cursor()
    for person in people:
        cursor.execute(
            "INSERT OR REPLACE INTO people (person_id, full_name, dob, email, phone) VALUES (?, ?, ?, ?, ?)",
            (person['person_id'], person['full_name'], person['dob'], person['email'], person['phone'])
        )
    conn.commit()


def insert_addresses(conn: sqlite3.Connection, addresses: List[Dict[str, Any]]):
    """Insert address records into the database."""
    cursor = conn.cursor()
    for addr in addresses:
        cursor.execute(
            "INSERT OR REPLACE INTO addresses (address_id, owner_id, street, city, state, postal_code, country) VALUES (?, ?, ?, ?, ?, ?, ?)",
            (addr['address_id'], addr['owner_id'], addr['street'], addr['city'], addr['state'], addr['postal_code'], addr['country'])
        )
    conn.commit()


def insert_bank_accounts(conn: sqlite3.Connection, accounts: List[Dict[str, Any]]):
    """Insert bank account records into the database."""
    cursor = conn.cursor()
    for acc in accounts:
        cursor.execute(
            "INSERT OR REPLACE INTO bank_accounts (account_id, owner_id, bank_name, routing, account_no, balance, currency) VALUES (?, ?, ?, ?, ?, ?, ?)",
            (acc['account_id'], acc['owner_id'], acc['bank_name'], acc['routing'], acc['account_no'], acc['balance'], acc['currency'])
        )
    conn.commit()


def insert_employments(conn: sqlite3.Connection, employments: List[Dict[str, Any]]):
    """Insert employment records into the database."""
    cursor = conn.cursor()
    for emp in employments:
        cursor.execute(
            "INSERT OR REPLACE INTO employments (employment_id, owner_id, employer, job_title, start_date, salary, currency) VALUES (?, ?, ?, ?, ?, ?, ?)",
            (emp['employment_id'], emp['owner_id'], emp['employer'], emp['job_title'], emp['start_date'], emp.get('salary'), emp.get('currency'))
        )
    conn.commit()


def insert_credit_cards(conn: sqlite3.Connection, cards: List[Dict[str, Any]]):
    """Insert credit card records into the database."""
    cursor = conn.cursor()
    for card in cards:
        cursor.execute(
            "INSERT OR REPLACE INTO credit_cards (card_id, owner_id, provider, number, cvc, expire) VALUES (?, ?, ?, ?, ?, ?)",
            (card['card_id'], card['owner_id'], card['provider'], card['number'], card['cvc'], card['expire'])
        )
    conn.commit()


def insert_vehicles(conn: sqlite3.Connection, vehicles: List[Dict[str, Any]]):
    """Insert vehicle records into the database."""
    cursor = conn.cursor()
    for vehicle in vehicles:
        cursor.execute(
            "INSERT OR REPLACE INTO vehicles (vehicle_id, owner_id, make, model, year, vin, license_plate, state) VALUES (?, ?, ?, ?, ?, ?, ?, ?)",
            (vehicle['vehicle_id'], vehicle['owner_id'], vehicle['make'], vehicle['model'], vehicle['year'], vehicle.get('vin'), vehicle.get('license_plate'), vehicle.get('state'))
        )
    conn.commit()


def insert_pets(conn: sqlite3.Connection, pets: List[Dict[str, Any]]):
    """Insert pet records into the database."""
    cursor = conn.cursor()
    for pet in pets:
        cursor.execute(
            "INSERT OR REPLACE INTO pets (pet_id, owner_id, name, species, breed, age, weight) VALUES (?, ?, ?, ?, ?, ?, ?)",
            (pet['pet_id'], pet['owner_id'], pet['name'], pet['species'], pet.get('breed'), pet.get('age'), pet.get('weight'))
        )
    conn.commit()


def insert_internet_accounts(conn: sqlite3.Connection, accounts: List[Dict[str, Any]]):
    """Insert internet account records into the database."""
    cursor = conn.cursor()
    for acc in accounts:
        cursor.execute(
            "INSERT OR REPLACE INTO internet_accounts (account_id, owner_id, url, username, email, password) VALUES (?, ?, ?, ?, ?, ?)",
            (acc['net_id'], acc['owner_id'], acc['url'], acc['username'], acc['email'], acc.get('password'))
        )
    conn.commit()


def insert_insurance_policies(conn: sqlite3.Connection, policies: List[Dict[str, Any]]):
    """Insert insurance policy records into the database."""
    cursor = conn.cursor()
    for policy in policies:
        cursor.execute(
            "INSERT OR REPLACE INTO insurance_policies (policy_id, owner_id, insurer, policy_number, policy_type, expires) VALUES (?, ?, ?, ?, ?, ?)",
            (policy['policy_id'], policy['owner_id'], policy['insurer'], policy['policy_number'], policy['policy_type'], policy['expires'])
        )
    conn.commit()


def insert_medical_records(conn: sqlite3.Connection, records: List[Dict[str, Any]]):
    """Insert medical records into the database."""
    cursor = conn.cursor()
    for record in records:
        cursor.execute(
            "INSERT OR REPLACE INTO medical_records (record_id, owner_id, ssn, blood_type, condition) VALUES (?, ?, ?, ?, ?)",
            (record['record_id'], record['owner_id'], record['ssn'], record['blood_type'], record['condition'])
        )
    conn.commit()


def insert_questions(conn: sqlite3.Connection, questions: List[Dict[str, Any]]):
    """Insert question records into the database."""
    cursor = conn.cursor()
    for q in questions:
        cursor.execute(
            "INSERT INTO questions (question, answer, difficulty, question_type, required_files, reasoning_steps) VALUES (?, ?, ?, ?, ?, ?)",
            (q['question'], q['answer'], q['difficulty'], q['question_type'], 
             json.dumps(q['required_files']), json.dumps(q['reasoning_steps']))
        )
    conn.commit()


def convert_jsonl_to_sqlite(data_dir: Path, output_db: Path):
    """Convert all JSONL files to SQLite database."""
    # Create database connection
    conn = sqlite3.connect(output_db)
    
    try:
        # Create tables
        print("Creating database tables...")
        create_tables(conn)
        
        # Define file mappings
        file_mappings = {
            'people.jsonl': ('people', insert_people),
            'addresses.jsonl': ('addresses', insert_addresses),
            'bank_accounts.jsonl': ('bank_accounts', insert_bank_accounts),
            'employments.jsonl': ('employments', insert_employments),
            'credit_cards.jsonl': ('credit_cards', insert_credit_cards),
            'vehicles.jsonl': ('vehicles', insert_vehicles),
            'pets.jsonl': ('pets', insert_pets),
            'internet_accounts.jsonl': ('internet_accounts', insert_internet_accounts),
            'insurance_policies.jsonl': ('insurance_policies', insert_insurance_policies),
            'medical_records.jsonl': ('medical_records', insert_medical_records),
            'llm_generated_questions.jsonl': ('questions', insert_questions)
        }
        
        # Process each file
        for filename, (table_name, insert_func) in file_mappings.items():
            file_path = data_dir / filename
            if file_path.exists():
                print(f"Loading {filename}...")
                data = load_jsonl(file_path)
                print(f"  Inserting {len(data)} records into {table_name}...")
                insert_func(conn, data)
            else:
                print(f"  Warning: {filename} not found, skipping...")
        
        # Create indexes for better query performance
        print("Creating indexes...")
        cursor = conn.cursor()
        
        # Owner ID indexes for faster joins
        cursor.execute("CREATE INDEX IF NOT EXISTS idx_addresses_owner ON addresses(owner_id)")
        cursor.execute("CREATE INDEX IF NOT EXISTS idx_bank_accounts_owner ON bank_accounts(owner_id)")
        cursor.execute("CREATE INDEX IF NOT EXISTS idx_employments_owner ON employments(owner_id)")
        cursor.execute("CREATE INDEX IF NOT EXISTS idx_credit_cards_owner ON credit_cards(owner_id)")
        cursor.execute("CREATE INDEX IF NOT EXISTS idx_vehicles_owner ON vehicles(owner_id)")
        cursor.execute("CREATE INDEX IF NOT EXISTS idx_pets_owner ON pets(owner_id)")
        cursor.execute("CREATE INDEX IF NOT EXISTS idx_internet_accounts_owner ON internet_accounts(owner_id)")
        cursor.execute("CREATE INDEX IF NOT EXISTS idx_insurance_policies_owner ON insurance_policies(owner_id)")
        cursor.execute("CREATE INDEX IF NOT EXISTS idx_medical_records_owner ON medical_records(owner_id)")
        
        # Name index for faster searches
        cursor.execute("CREATE INDEX IF NOT EXISTS idx_people_name ON people(full_name)")
        
        conn.commit()
        print("✅ Database conversion complete!")
        
        # Print statistics
        cursor = conn.cursor()
        print("\nDatabase statistics:")
        for table in ['people', 'addresses', 'bank_accounts', 'employments', 'credit_cards', 
                      'vehicles', 'pets', 'internet_accounts', 'insurance_policies', 
                      'medical_records', 'questions']:
            cursor.execute(f"SELECT COUNT(*) FROM {table}")
            count = cursor.fetchone()[0]
            print(f"  {table}: {count} records")
            
    finally:
        conn.close()


def main():
    parser = argparse.ArgumentParser(description="Convert JSONL files to SQLite database")
    parser.add_argument(
        "--data-dir", 
        type=Path, 
        default=Path(__file__).parent.parent / "data",
        help="Directory containing JSONL files"
    )
    parser.add_argument(
        "--output-db", 
        type=Path,
        default=Path(__file__).parent.parent / "data" / "letta_file_bench.db",
        help="Output SQLite database file"
    )
    
    args = parser.parse_args()
    
    if not args.data_dir.exists():
        print(f"❌ Error: Data directory {args.data_dir} does not exist")
        return
    
    print(f"📂 Data directory: {args.data_dir}")
    print(f"💾 Output database: {args.output_db}")
    
    convert_jsonl_to_sqlite(args.data_dir, args.output_db)


if __name__ == "__main__":
    main()
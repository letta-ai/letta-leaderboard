"""
Pydantic models for agent-generated questions with full trace support.
"""
from typing import List, Literal, Dict, Any, Optional
from pydantic import BaseModel
from datetime import datetime


class QueryTrace(BaseModel):
    """Single query execution in the generation trace."""
    timestamp: datetime
    query_type: Literal["exploration", "uniqueness_check", "answer_query", "validation"]
    sql: str
    result: Any  # Can be list of dicts, single value, or error
    row_count: int
    execution_time_ms: float
    reasoning: str  # Agent's explanation for why this query was run


class AgentGeneratedQuestion(BaseModel):
    """Question generated by the agent with full generation trace."""
    question: str
    answer: str  # The actual answer from SQL execution
    sql_query: str  # Final query that produces the answer
    grep_strategy: str  # Step-by-step instructions for solving with grep/open_files
    difficulty: Literal["hard"]  # Only hard questions
    question_type: Literal[
        "multi_hop_counting",
        "complex_comparison", 
        "relationship_based",
        "specific_field_extraction",
        "multi_hop_lookup"
    ]
    required_files: List[str]  # Which .txt files are needed
    involves_counting: bool  # Whether answer requires counting matches
    generation_trace: List[QueryTrace]  # Full trace of agent's SQL exploration
    metadata: Dict[str, Any]  # Additional metadata (e.g., unique fields used)
    

class QuestionGenerationSession(BaseModel):
    """A complete question generation session."""
    session_id: str
    start_time: datetime
    end_time: Optional[datetime]
    model: str = "claude-sonnet-4-20250514"  # Claude Sonnet 4
    total_questions_generated: int
    questions: List[AgentGeneratedQuestion]
    session_metadata: Dict[str, Any]
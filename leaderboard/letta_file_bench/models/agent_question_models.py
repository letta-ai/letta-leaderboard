"""
Pydantic models for agent-generated questions with full trace support.
"""
from typing import List, Literal, Dict, Any, Optional
from pydantic import BaseModel
from datetime import datetime


class QueryTrace(BaseModel):
    """Single query execution in the generation trace."""
    timestamp: datetime
    query_type: Literal["exploration", "uniqueness_check", "answer_query", "validation"]
    sql: str
    result: Any  # Can be list of dicts, single value, or error
    row_count: int
    execution_time_ms: float
    reasoning: str  # Agent's explanation for why this query was run


class SQLQueryWithResult(BaseModel):
    """SQL query with its description and result."""
    description: str  # What this query investigates
    query: str  # The SQL query
    result: Any  # Query result (can be list, single value, or "No results")
    error: Optional[str] = None  # Error if query failed


class AgentGeneratedQuestion(BaseModel):
    """Question generated by the agent with full generation trace."""
    question: str
    answer: str  # Natural language answer synthesized from query results
    sql_queries: List[SQLQueryWithResult]  # Multiple queries that build the answer
    timestamp: str  # ISO format timestamp
    # Optional fields for backward compatibility and enhanced features
    grep_strategy: Optional[str] = None  # Step-by-step instructions for solving with grep/open_files
    difficulty: Optional[Literal["hard"]] = "hard"  # Only hard questions
    question_type: Optional[Literal[
        "multi_hop_counting",
        "complex_comparison", 
        "relationship_based",
        "specific_field_extraction",
        "multi_hop_lookup",
        "negative_condition",
        "outlier_detection"
    ]] = None
    required_files: Optional[List[str]] = None  # Which .txt files are needed
    involves_counting: Optional[bool] = None  # Whether answer requires counting matches
    generation_trace: Optional[List[QueryTrace]] = None  # Full trace of agent's SQL exploration
    metadata: Optional[Dict[str, Any]] = None  # Additional metadata (e.g., unique fields used)
    

class QuestionGenerationSession(BaseModel):
    """A complete question generation session."""
    session_id: str
    start_time: datetime
    end_time: Optional[datetime]
    model: str = "claude-sonnet-4-20250514"  # Claude Sonnet 4
    total_questions_generated: int
    questions: List[AgentGeneratedQuestion]
    session_metadata: Dict[str, Any]